/*****************************************************
For the Third Data Prefetching Championship - DPC3

Paper ID: #4
Instruction Pointer Classifying Prefetcher - IPCP

Authors: 
Samuel Pakalapati - pakalapatisamuel@gmail.com
Biswabandan Panda - biswap@cse.iitk.ac.in
******************************************************/

#include "cache.h"
#include <bitset>
#include <cstdint>
#include <cmath>
#define NUM_OFFSET 46
#define SCORE_MAX 31
#define ROUND_MAX 100
#define RRINDEX 6
#define RRTAG 12

#define NUM_IP_TABLE_L2_ENTRIES 1024
#define NUM_IP_INDEX_BITS 10
#define NUM_IP_TAG_BITS 6
#define S_TYPE 1                                            // global stream (GS)
#define CS_TYPE 2                                           // constant stride (CS)
#define CPLX_TYPE 3                                         // complex stride (CPLX)
#define NL_TYPE 4                                           // next line (NL)
 
 
int OFFSET[NUM_OFFSET] ;
void set_offset(){
  for(int u=0;u<16;u++){
    OFFSET[u]=u+1;
  }
  for(int u=16;u<32;u++){
    OFFSET[u]=(15-u);
  }
  OFFSET[32]=18;OFFSET[33]=-18;OFFSET[34]=20;OFFSET[35]=-20;OFFSET[36]=24;OFFSET[37]=-24;OFFSET[38]=30;OFFSET[39]=-30;OFFSET[40]=32;OFFSET[41]=-32;OFFSET[42]=36;OFFSET[43]=-36;OFFSET[44]=40;OFFSET[45]=-40;
}
void INCREASE_CHECK(int &p, const int q)
{
  p = p + 1;
  if (p == q)
  {
    p = 0;
  }
  return;
}
uint64_t BIT_REDUCE(uint64_t y, uint64_t z)
{
  uint64_t red = pow(2, z) - 1;
  red = y & red;
  return red;
}
int PRE_OFF; // 7 bits (6-bit value + 1 sign bit)
int RR[2][1 << RRINDEX];
int PRE_BIT[L2C_SET][L2C_WAY];

void RR_INTIALIZE()
{
  int p = (1 << RRINDEX);
  for (int q = 0; q < p; q++)
  {
    RR[0][q] = 0;
    RR[1][q] = 0;
  }
}
int RR_TAG(long long A)
{
  return BIT_REDUCE(A >> RRINDEX, RRTAG);
}
int RR_LINDEX(long long A)
{
  int B = A >> RRINDEX;
  return BIT_REDUCE(A ^ B, RRINDEX);
}

int RR_RINDEX(long long A)
{
  int B = A >> (2 * RRINDEX);
  return BIT_REDUCE(A ^ B, RRINDEX);
}

void RR_LINSERT(long long A)
{
  int Q = RR_LINDEX(A);
  RR[0][Q] = RR_TAG(A);
}

void RR_RINSERT(long long A)
{
  int Q = RR_RINDEX(A);
  RR[1][Q] = RR_TAG(A);
}

int RRHIT(long long lineaddr)
{
  int P = RR_LINDEX(lineaddr);
  int Q = RR_RINDEX(lineaddr);
  int R = RR_TAG(lineaddr);
  bool a= (RR[0][P] == R);
  bool b=(RR[1][Q] == R);
  bool c= (a || b);
  return c;
}
struct offsets_scores
{
  int score[NUM_OFFSET]; // log2 SCORE_MAX = 5 bits per entry
  int max_s;       // log2 SCORE_MAX = 5 bits
  int best_offset;     // 7 bits (6-bit value + 1 sign bit)
  int cur_round;           // log2 ROUND_MAX = 7 bits
  int level;               // log2 NUM_OFFSET = 6 bits
} offset_check;
void SCORE_RESET()
{
  int i;
  for (i = 0; i < 46; i++)
  {
    offset_check.score[i] = 0;
  }
  offset_check.best_offset = 0;
  offset_check.cur_round = 0;
  offset_check.max_s = 0;
  offset_check.level = 0;
}

void FIND_BEST_OFFSET(long long A)
{
  int cur_offset = OFFSET[offset_check.level];
  long long PAST_ADDR = A - cur_offset;

  if (RRHIT(PAST_ADDR))
  {
    // the current line would likely have been prefetched successfully with that offset
    // ==> increment the score
    offset_check.score[offset_check.level]++;
    if (offset_check.score[offset_check.level] >= offset_check.max_s)
    {
      offset_check.max_s = offset_check.score[offset_check.level];
      offset_check.best_offset = cur_offset;
    }
  }

  if (offset_check.level == (NUM_OFFSET - 1))
  {
    offset_check.cur_round++;

    if (offset_check.max_s == SCORE_MAX )
    { 
      if(offset_check.best_offset !=0){
        PRE_OFF= offset_check.best_offset;
      }
      else{
        PRE_OFF=1;
      }

      if (offset_check.max_s <= 10)
      {
        
        PRE_OFF = 0;
      }
      SCORE_RESET();
      return;
    }
    else if(offset_check.cur_round == ROUND_MAX){
     if(offset_check.best_offset !=0){
        PRE_OFF= offset_check.best_offset;
      }
      else{
        PRE_OFF=1;
      }

      if (offset_check.max_s <= 10)
      {
        
        PRE_OFF = 0;
      }
      SCORE_RESET();
      return; 
    } 
  }
  INCREASE_CHECK(offset_check.level, NUM_OFFSET); // prepare to test the next offset
}
 

// #define SIG_DEBUG_PRINT_L2
#ifdef SIG_DEBUG_PRINT_L2
#define SIG_DP(x) x
#else
#define SIG_DP(x)
#endif

class IP_TRACKER {
  public:
    uint64_t ip_tag;
    uint16_t ip_valid;
    uint32_t pref_type;                                     // prefetch class type
    int stride;                                             // last stride sent by metadata

    IP_TRACKER () {
        ip_tag = 0;
        ip_valid = 0;
        pref_type = 0;
        stride = 0;
    };
};

uint32_t spec_nl_l2[NUM_CPUS] = {0};
IP_TRACKER trackers[NUM_CPUS][NUM_IP_TABLE_L2_ENTRIES];

int decode_stride(uint32_t metadata){
    int stride=0;
    if(metadata & 0b1000000)
        stride = -1*(metadata & 0b111111);
    else
        stride = metadata & 0b111111;

    return stride;
}

void CACHE::l2c_prefetcher_initialize() 
{
cout << "CPU " << cpu << " L2C BEST OFFSET prefetcher" << endl;
  PRE_OFF = 1;
  RR_INTIALIZE();
  SCORE_RESET();
  set_offset();
  int i, j;
  for (i = 0; i < L2C_SET; i++)
  {
    for (j = 0; j < L2C_WAY; j++)
    {
      PRE_BIT[i][j] = 0;
    }
  }
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    int prefetch_degree = 0;
    int64_t stride = decode_stride(metadata_in);
    uint32_t pref_type = metadata_in & 0xF00;
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS) & ((1 << NUM_IP_TAG_BITS)-1);

if(NUM_CPUS == 1){
   if (MSHR.occupancy < (1*MSHR.SIZE)/2)
    prefetch_degree = 4;
   else 
    prefetch_degree = 3;  
} else {                                    // tightening the degree for multi-core
    prefetch_degree = 2;
}

// calculate the index bit
int index = ip & ((1 << NUM_IP_INDEX_BITS)-1);
    if(trackers[cpu][index].ip_tag != ip_tag){              // new/conflict IP
        if(trackers[cpu][index].ip_valid == 0){             // if valid bit is zero, update with latest IP info
        trackers[cpu][index].ip_tag = ip_tag;
        trackers[cpu][index].pref_type = pref_type;
        trackers[cpu][index].stride = stride;
    } else {
        trackers[cpu][index].ip_valid = 0;                  // otherwise, reset valid bit and leave the previous IP as it is
    }

        // issue a next line prefetch upon encountering new IP
       // uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;
        //prefetch_line(ip, addr, pf_address, FILL_L2, 0);
        long long lineaddr = addr >> LOG2_BLOCK_SIZE;
  int cur_set = get_set(addr);
  int cur_way = get_way(addr, cur_set);
  if (cur_way>=0)
  {
    PRE_BIT[cur_set][cur_way] = 0;
  }
    FIND_BEST_OFFSET(lineaddr);
    prefetch_line(ip, lineaddr << LOG2_BLOCK_SIZE, (lineaddr + PRE_OFF) << LOG2_BLOCK_SIZE, FILL_L2, 0);
        SIG_DP(cout << "1, ");
        return metadata_in;
    }
    else {                                                  // if same IP encountered, set valid bit
        trackers[cpu][index].ip_valid = 1;
    }

// update the IP table upon receiving metadata from prefetch
if(type == PREFETCH){
    trackers[cpu][index].pref_type = pref_type;
    trackers[cpu][index].stride = stride;
    spec_nl_l2[cpu] = metadata_in & 0x1000;
}

SIG_DP(
cout << ip << ", " << cache_hit << ", " << cl_addr << ", ";
cout << ", " << stride << "; ";
);


// we are prefetching only for GS, CS and NL classes
    if(trackers[cpu][index].stride != 0){ 
        if(trackers[cpu][index].pref_type == 0x100 || trackers[cpu][index].pref_type == 0x200){      // GS or CS class   
          if(trackers[cpu][index].pref_type == 0x100)
           if(NUM_CPUS == 1)
              prefetch_degree = 4;    
            for (int i=0; i<prefetch_degree; i++) {
                uint64_t pf_address = (cl_addr + (trackers[cpu][index].stride*(i+1))) << LOG2_BLOCK_SIZE;
                
                // Check if prefetch address is in same 4 KB page
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;
                
                prefetch_line(ip, addr, pf_address, FILL_L2,0);
                SIG_DP(cout << trackers[cpu][index].stride << ", ");
            }
        }
        else if(trackers[cpu][index].pref_type == 0x400 && spec_nl_l2[cpu] > 0){
        long long lineaddr = addr >> LOG2_BLOCK_SIZE;
  int cur_set = get_set(addr);
  int cur_way = get_way(addr, cur_set);
  if (cur_way>=0)
  {
    PRE_BIT[cur_set][cur_way] = 0;
  }
    FIND_BEST_OFFSET(lineaddr);
    prefetch_line(ip, lineaddr << LOG2_BLOCK_SIZE, (lineaddr + PRE_OFF) << LOG2_BLOCK_SIZE, FILL_L2, 0);
        //uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;   
        //prefetch_line(ip, addr, pf_address, FILL_L2, 0);
        SIG_DP(cout << "1;");
        }
    }

SIG_DP(cout << endl);
return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{

}

